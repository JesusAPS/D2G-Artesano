generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ZodiacSign {
  id                 Int      @id @default(autoincrement())
  name_zodiac        String   @unique @map("name_zodiac") @db.VarChar(50)
  img_url            String?  @map("img_url") @db.VarChar(255)
  description_zodiac String?  @map("description_zodiac")
  created_at         DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  users              User[]

  @@map("zodiac_signs")
}

model User {
  id                   Int                  @id @default(autoincrement())
  name_user            String               @map("name_user") @db.VarChar(255)
  email                String               @unique @db.VarChar(255)
  password_hash        String               @map("password_hash") @db.VarChar(255)
  roles                UserRole             @default(Student)
  date_of_birth        DateTime             @map("date_of_birth") @db.Date
  zodiac_sign_id       Int?                 @map("zodiac_sign_id")
  gender               GenderType?
  img_url              String?              @map("img_url") @db.VarChar(255)
  created_at           DateTime             @default(now()) @map("created_at") @db.Timestamp(6)
  updated_at           DateTime?            @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  deleted_at           DateTime?            @map("deleted_at") @db.Timestamp(6)
  course_reviews       CourseReview[]
  courses              Course[]
  enrollments          Enrollment[]
  orders               Order[]
  product_reviews      ProductReview[]
  user_course_progress UserCourseProgress[]
  user_lesson_progress UserLessonProgress[]
  zodiac_sign          ZodiacSign?          @relation(fields: [zodiac_sign_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("users")
}

model Category {
  id                   Int               @id @default(autoincrement())
  name_category        String            @unique @map("name_category") @db.VarChar(100)
  description_category String?           @map("description_category")
  created_at           DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updated_at           DateTime?         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  curso_categories     CursoCategory[]
  product_categories   ProductCategory[]

  @@map("categories")
}

model Course {
  id                   Int                  @id @default(autoincrement())
  name_course          String               @map("name_course") @db.VarChar(255)
  description_course   String?              @map("description_course")
  price                Decimal              @default(0.00) @db.Decimal(10, 2)
  duration             Int?
  instructor_id        Int                  @map("instructor_id")
  img_url              String               @map("img_url") @db.VarChar(255)
  created_at           DateTime             @default(now()) @map("created_at") @db.Timestamp(6)
  updated_at           DateTime?            @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  deleted_at           DateTime?            @map("deleted_at") @db.Timestamp(6)
  course_reviews       CourseReview[]
  course_schedules     CourseSchedule[]
  instructor           User                 @relation(fields: [instructor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  curso_categories     CursoCategory[]
  enrollments          Enrollment[]
  modules              Module[]
  user_course_progress UserCourseProgress[]

  @@map("courses")
}

model CourseSchedule {
  id         Int             @id @default(autoincrement())
  course_id  Int             @map("course_id")
  start_date DateTime        @map("start_date") @db.Timestamp(6)
  end_date   DateTime?       @map("end_date") @db.Timestamp(6)
  location   String?         @db.VarChar(255)
  status     ScheduleStatus? @default(scheduled)
  created_at DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updated_at DateTime?       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  course     Course          @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("course_schedule")
}

model Module {
  id                 Int       @id @default(autoincrement())
  course_id          Int       @map("course_id")
  title              String    @db.VarChar(255)
  description_module String?   @map("description_module")
  orden              Int
  created_at         DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updated_at         DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  lessons            Lesson[]
  course             Course    @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("modules")
}

model Lesson {
  id                   Int                  @id @default(autoincrement())
  module_id            Int                  @map("module_id")
  title                String?              @db.VarChar(255)
  content              String?
  type                 String?              @db.VarChar(50)
  orden                Int
  created_at           DateTime             @default(now()) @map("created_at") @db.Timestamp(6)
  updated_at           DateTime?            @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  module               Module               @relation(fields: [module_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_lesson_progress UserLessonProgress[]

  @@map("lessons")
}

model CursoCategory {
  course_id   Int      @map("course_id")
  category_id Int      @map("category_id")
  category    Category @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  course      Course   @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([course_id, category_id])
  @@map("curso_categories")
}

model Enrollment {
  id                Int       @id @default(autoincrement())
  user_id           Int       @map("user_id")
  course_id         Int       @map("course_id")
  enrolled_at       DateTime  @default(now()) @map("enrolled_at") @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  notification_sent Boolean?  @default(false) @map("notification_sent")
  last_notification DateTime? @map("last_notification") @db.Timestamp(6)
  course            Course    @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, course_id])
  @@map("enrollments")
}

model UserLessonProgress {
  id           Int            @id @default(autoincrement())
  user_id      Int            @map("user_id")
  lesson_id    Int            @map("lesson_id")
  status       ProgressStatus @default(not_started)
  completed_at DateTime?      @map("completed_at") @db.Timestamp(6)
  created_at   DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updated_at   DateTime?      @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  lesson       Lesson         @relation(fields: [lesson_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         User           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, lesson_id])
  @@map("user_lesson_progress")
}

model UserCourseProgress {
  id                    Int       @id @default(autoincrement())
  user_id               Int       @map("user_id")
  course_id             Int       @map("course_id")
  completion_percentage Decimal   @default(0.0) @map("completion_percentage") @db.Decimal(5, 2)
  last_accessed_at      DateTime? @map("last_accessed_at") @db.Timestamp(6)
  created_at            DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updated_at            DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  course                Course    @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                  User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, course_id])
  @@map("user_course_progress")
}

model Product {
  id                  Int               @id @default(autoincrement())
  name_product        String            @map("name_product") @db.VarChar(255)
  description_product String?           @map("description_product")
  price               Decimal           @default(0.00) @db.Decimal(10, 2)
  stock               Int               @default(0)
  img_url             String?           @map("img_url") @db.VarChar(255)
  created_at          DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updated_at          DateTime?         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  deleted_at          DateTime?         @map("deleted_at") @db.Timestamp(6)
  order_items         OrderItem[]
  product_categories  ProductCategory[]
  product_reviews     ProductReview[]

  @@map("products")
}

model ProductCategory {
  product_id  Int      @map("product_id")
  category_id Int      @map("category_id")
  category    Category @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product     Product  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([product_id, category_id])
  @@map("product_categories")
}

model Order {
  id               Int           @id @default(autoincrement())
  user_id          Int           @map("user_id")
  total_amount     Decimal       @default(0.0) @map("total_amount") @db.Decimal(10, 2)
  status           OrderStatus   @default(pending)
  shipping_address String        @map("shipping_address")
  billing_address  String        @map("billing_address")
  shipping_cost    Decimal       @default(0.0) @map("shipping_cost") @db.Decimal(10, 2)
  tax_amount       Decimal       @default(0.0) @map("tax_amount") @db.Decimal(10, 2)
  payment_method   String        @map("payment_method") @db.VarChar(50)
  payment_status   PaymentStatus @default(pending)
  transaction_id   String?       @map("transaction_id") @db.VarChar(100)
  created_at       DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updated_at       DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  order_items      OrderItem[]
  user             User          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("orders")
}

model OrderItem {
  id         Int       @id @default(autoincrement())
  order_id   Int       @map("order_id")
  product_id Int       @map("product_id")
  quantity   Int
  price      Decimal   @db.Decimal(10, 2)
  created_at DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updated_at DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  order      Order     @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product    Product   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("order_items")
}

model CourseReview {
  id         Int       @id @default(autoincrement())
  course_id  Int       @map("course_id")
  user_id    Int       @map("user_id")
  rating     Int
  comments   String?
  created_at DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updated_at DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  course     Course    @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("course_reviews")
}

model ProductReview {
  id         Int       @id @default(autoincrement())
  product_id Int       @map("product_id")
  user_id    Int       @map("user_id")
  rating     Int
  comments   String?
  created_at DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updated_at DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  product    Product   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("product_reviews")
}

enum UserRole {
  Student
  Instructor
  Admin

  @@map("user_role")
}

enum GenderType {
  Male
  Female
  Other
  Prefer_not_to_say @map("Prefer not to say")

  @@map("gender_type")
}

enum ScheduleStatus {
  scheduled
  completed
  cancelled

  @@map("schedule_status")
}

enum ProgressStatus {
  not_started
  in_progress
  completed

  @@map("progress_status")
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled

  @@map("order_status")
}

enum PaymentStatus {
  pending
  completed
  failed

  @@map("payment_status")
}
